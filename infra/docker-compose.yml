services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - internal
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    profiles: ["local", "staging", "prod"]
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT}
          cpus: ${POSTGRES_CPU_LIMIT}
        reservations:
          memory: ${POSTGRES_MEMORY_RESERVATION}
          cpus: ${POSTGRES_CPU_RESERVATION}
    # PostgreSQL optimizations for low memory
    command: >
      postgres
      -c shared_buffers=${POSTGRES_SHARED_BUFFERS}
      -c effective_cache_size=${POSTGRES_CACHE_SIZE}
      -c maintenance_work_mem=${POSTGRES_MAINTENANCE_MEM}
      -c work_mem=${POSTGRES_WORK_MEM}
      -c max_connections=${POSTGRES_MAX_CONNECTIONS}
      -c wal_buffers=1MB
      -c random_page_cost=1.1

  # Backend Application (only for staging/prod)
  backend:
    image: biplace-backend:prod ## WIP
    networks:
      - internal
    depends_on:
      - postgres
    command: ["node", "dist/main.js"]
    restart: unless-stopped
    profiles: ["staging", "prod"]
    deploy:
      resources:
        limits:
          memory: ${BACKEND_MEMORY_LIMIT}
          cpus: ${BACKEND_CPU_LIMIT}
        reservations:
          memory: ${BACKEND_MEMORY_RESERVATION}
          cpus: ${BACKEND_CPU_RESERVATION}
    # Node.js optimizations for low memory
    environment:
      - NODE_OPTIONS=--max-old-space-size=${NODE_MAX_OLD_SPACE}
      - UV_THREADPOOL_SIZE=${UV_THREADPOOL_SIZE}

  # Caddy Reverse Proxy (only for staging/prod)
  caddy:
    image: caddy:2
    ports:
      - "80:80"
      - "443:443"
    networks:
      - internal
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - postgres
      - backend
    restart: unless-stopped
    profiles: ["staging", "prod"]
    deploy:
      resources:
        limits:
          memory: ${CADDY_MEMORY_LIMIT}
          cpus: ${CADDY_CPU_LIMIT}
        reservations:
          memory: ${CADDY_MEMORY_RESERVATION}
          cpus: ${CADDY_CPU_RESERVATION}

volumes:
  postgres_data:
  caddy_data:
  caddy_config:

networks:
  internal:
    name: ${ENV}_internal_network